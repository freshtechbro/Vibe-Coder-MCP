import { Context, MiddlewareHandler } from 'hono'; import { ZodError } from
'zod'; import { HTTPException } from 'hono/http-exception'; export const
errorHandler = (): MiddlewareHandler => { return async (c: Context, next) => {
try { await next(); } catch (error) { if (error instanceof ZodError) { return
c.json( { error: 'Validation Error', details: error.errors, }, 400 ); } if
(error instanceof HTTPException) { return c.json( { error: error.message, },
error.status ); } console.error('Unhandled error:', error); return c.json( {
error: 'Internal Server Error', ...(c.env?.NODE_ENV === 'development' && {
details: error instanceof Error ? error.message : String(error), }), }, 500 ); }
}; };