package handlers import ( "encoding/json" "net/http" "time" "{{kebabCase
  projectName
}}/server/db" "{{kebabCase projectName}}/server/utils"
"golang.org/x/crypto/bcrypt" ) type RegisterRequest struct { Email string
`json:"email"` Password string `json:"password"` Name string `json:"name"` }
type LoginRequest struct { Email string `json:"email"` Password string
`json:"password"` } type AuthResponse struct { Token string `json:"token"` User
db.User `json:"user"` } func Register(w http.ResponseWriter, r *http.Request) {
var req RegisterRequest if err := json.NewDecoder(r.Body).Decode(&req); err !=
nil { http.Error(w, err.Error(), http.StatusBadRequest) return } // Hash
password hashedPassword, err :=
bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost) if err !=
nil { http.Error(w, "Failed to hash password", http.StatusInternalServerError)
return } // Create user user := db.User{ Email: req.Email, Name: req.Name,
HashedPassword: string(hashedPassword), } if err := db.DB.Create(&user).Error;
err != nil { http.Error(w, "Failed to create user",
http.StatusInternalServerError) return } // Generate token token, err :=
utils.GenerateToken(user.ID) if err != nil { http.Error(w, "Failed to generate
token", http.StatusInternalServerError) return }
json.NewEncoder(w).Encode(AuthResponse{ Token: token, User: user, }) } func
Login(w http.ResponseWriter, r *http.Request) { var req LoginRequest if err :=
json.NewDecoder(r.Body).Decode(&req); err != nil { http.Error(w, err.Error(),
http.StatusBadRequest) return } // Find user var user db.User if err :=
db.DB.Where("email = ?", req.Email).First(&user).Error; err != nil {
http.Error(w, "Invalid credentials", http.StatusUnauthorized) return } // Check
password if err := bcrypt.CompareHashAndPassword([]byte(user.HashedPassword),
[]byte(req.Password)); err != nil { http.Error(w, "Invalid credentials",
http.StatusUnauthorized) return } // Generate token token, err :=
utils.GenerateToken(user.ID) if err != nil { http.Error(w, "Failed to generate
token", http.StatusInternalServerError) return }
json.NewEncoder(w).Encode(AuthResponse{ Token: token, User: user, }) }