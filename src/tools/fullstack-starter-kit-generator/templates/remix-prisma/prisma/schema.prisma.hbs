generator client { provider = "prisma-client-js" } datasource db { provider =
"postgresql" url = env("DATABASE_URL") } model User { id String @id
@default(cuid()) email String @unique name String? hashedPassword String?
createdAt DateTime @default(now()) updatedAt DateTime @updatedAt roles Role[]
@relation("UserRoles") sessions Session[] accounts Account[] } model Role { id
String @id @default(cuid()) name String @unique description String? createdAt
DateTime @default(now()) updatedAt DateTime @updatedAt users User[]
@relation("UserRoles") permissions Permission[] @relation("RolePermissions") }
model Permission { id String @id @default(cuid()) action String entity String
access String description String? createdAt DateTime @default(now()) updatedAt
DateTime @updatedAt roles Role[] @relation("RolePermissions") @@unique([action,
entity, access]) } model Session { id String @id @default(cuid()) userId String
expiresAt DateTime createdAt DateTime @default(now()) user User
@relation(fields: [userId], references: [id], onDelete: Cascade) } model Account
{ id String @id @default(cuid()) userId String type String provider String
providerAccountId String refresh_token String? @db.Text access_token String?
@db.Text expires_at Int? token_type String? scope String? id_token String?
@db.Text session_state String? user User @relation(fields: [userId], references:
[id], onDelete: Cascade) @@unique([provider, providerAccountId]) } model
VerificationToken { identifier String token String @unique expires DateTime
@@unique([identifier, token]) }