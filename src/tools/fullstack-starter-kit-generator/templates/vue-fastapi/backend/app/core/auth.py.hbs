from datetime import datetime, timedelta from typing import Optional from
fastapi import APIRouter, Depends, HTTPException, status from fastapi.security
import OAuth2PasswordBearer, OAuth2PasswordRequestForm from jose import
JWTError, jwt from passlib.context import CryptContext from sqlalchemy.orm
import Session from app.core.config import settings from app.core.security
import verify_password, get_password_hash from app.crud.crud_user import
crud_user from app.db.session import get_db from app.models.user import User
from app.schemas.token import Token, TokenPayload from app.schemas.user import
UserCreate, UserResponse auth_router = APIRouter() pwd_context =
CryptContext(schemes=["bcrypt"], deprecated="auto") oauth2_scheme =
OAuth2PasswordBearer(tokenUrl="auth/token") def create_access_token(data: dict,
expires_delta: Optional[timedelta] = None) -> str: to_encode = data.copy() if
expires_delta: expire = datetime.utcnow() + expires_delta else: expire =
datetime.utcnow() + timedelta(minutes=15) to_encode.update({"exp": expire})
encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY,
algorithm=settings.ALGORITHM) return encoded_jwt async def get_current_user( db:
Session = Depends(get_db), token: str = Depends(oauth2_scheme) ) -> User:
credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED,
detail="Could not validate credentials", headers={"WWW-Authenticate": "Bearer"},
) try: payload = jwt.decode(token, settings.SECRET_KEY,
algorithms=[settings.ALGORITHM]) token_data = TokenPayload(**payload) except
JWTError: raise credentials_exception user = crud_user.get(db,
id=token_data.sub) if not user: raise credentials_exception return user
@auth_router.post("/token", response_model=Token) async def
login_for_access_token( db: Session = Depends(get_db), form_data:
OAuth2PasswordRequestForm = Depends() ) -> Token: user = crud_user.authenticate(
db, email=form_data.username, password=form_data.password ) if not user: raise
HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect
username or password", headers={"WWW-Authenticate": "Bearer"}, )
access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
access_token = create_access_token( data={"sub": str(user.id)},
expires_delta=access_token_expires ) return Token(access_token=access_token,
token_type="bearer") @auth_router.post("/register", response_model=UserResponse)
def register_user(*, db: Session = Depends(get_db), user_in: UserCreate) ->
User: user = crud_user.get_by_email(db, email=user_in.email) if user: raise
HTTPException( status_code=400, detail="The user with this email already exists
in the system.", ) user = crud_user.create(db, obj_in=user_in) return user