import { TRPCError } from '@trpc/server'; import { z } from 'zod'; import bcrypt
from 'bcryptjs'; import { protectedProcedure, publicProcedure, router } from
'../trpc'; export const authRouter = router({ register: publicProcedure .input(
z.object({ email: z.string().email(), password: z.string().min(8), name:
z.string().optional(), }) ) .mutation(async ({ input, ctx }) => { const { email,
password, name } = input; const existingUser = await
ctx.prisma.user.findUnique({ where: { email }, }); if (existingUser) { throw new
TRPCError({ code: 'CONFLICT', message: 'User already exists', }); } const
hashedPassword = await bcrypt.hash(password, 10); const user = await
ctx.prisma.user.create({ data: { email, hashedPassword, name, }, }); return {
id: user.id, email: user.email, name: user.name }; }), getSession:
publicProcedure.query(({ ctx }) => { return ctx.session; }), getSecretMessage:
protectedProcedure.query(() => { return 'You are authenticated!'; }), });