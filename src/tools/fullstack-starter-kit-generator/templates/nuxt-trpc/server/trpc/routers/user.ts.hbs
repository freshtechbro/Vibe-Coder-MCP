import { TRPCError } from '@trpc/server'; import { z } from 'zod'; import {
protectedProcedure, router } from '../trpc'; export const userRouter = router({
me: protectedProcedure.query(async ({ ctx }) => { const user = await
ctx.prisma.user.findUnique({ where: { id: ctx.session.user.id }, include: {
roles: { include: { permissions: true, }, }, }, }); if (!user) { throw new
TRPCError({ code: 'NOT_FOUND', message: 'User not found', }); } return user; }),
updateProfile: protectedProcedure .input( z.object({ name:
z.string().optional(), }) ) .mutation(async ({ input, ctx }) => { const user =
await ctx.prisma.user.update({ where: { id: ctx.session.user.id }, data: input,
}); return user; }), });