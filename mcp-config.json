{
  "tools": {
    "fullstack-starter-kit-generator": {
      "description": "Generates full-stack project starter kits with custom tech stacks (e.g., frontend framework, backend language, database).",
      "use_cases": ["project scaffolding", "tech stack setup", "application boilerplate", "new project", "starter kit"],
      "input_patterns": ["create starter kit for {use_case}", "generate {type} project", "scaffold {application_type} app", "setup boilerplate for {project}"]
    },
    "research-manager": {
      "description": "Performs in-depth research on technical topics, concepts, or comparisons using Perplexity Sonar.",
      "use_cases": ["research", "comparison", "best practices", "explain concept", "technical deep dive", "learn about {topic}"],
      "input_patterns": ["research {topic}", "compare {A} and {B}", "best practices for {domain}", "explain {concept}"]
    },
    "prd-generator": {
      "description": "Creates comprehensive Product Requirements Documents (PRDs) based on a feature or product description.",
      "use_cases": ["product requirements", "feature documentation", "prd", "feature specification", "document feature"],
      "input_patterns": ["create prd for {product}", "document requirements for {feature}"]
    },
    "user-stories-generator": {
      "description": "Generates user stories with acceptance criteria based on a feature or requirement.",
      "use_cases": ["user stories", "workflow definition", "agile planning", "acceptance criteria", "feature breakdown"],
      "input_patterns": ["create stories for {feature}", "define workflow for {process}", "generate user stories for {requirement}"]
    },
    "task-list-generator": {
      "description": "Produces development task lists with dependencies from requirements or user stories.",
      "use_cases": ["task breakdown", "sprint planning", "project tasks", "development plan"],
      "input_patterns": ["plan tasks for {feature}", "break down {requirement} into tasks", "create task list for {story}"]
    },
    "rules-generator": {
      "description": "Creates project-specific development rules, standards, or guidelines.",
      "use_cases": ["coding standards", "project guidelines", "linting rules", "style guide", "development rules"],
      "input_patterns": ["setup rules for {project}", "define standards for {language}", "create style guide for {framework}"]
    },
    "run-workflow": {
      "description": "Runs a predefined sequence of tool calls (a workflow) based on a workflow name and input parameters.",
      "use_cases": ["run workflow", "execute plan", "start process", "automate sequence", "execute workflow", "run automation"],
      "input_patterns": ["run workflow {workflowName}", "start {workflowName} workflow with input {workflowInput}", "execute the {workflowName} plan"]
    },
    "get-job-result": {
      "description": "Retrieves the status and result of a background job previously initiated by another tool.",
      "use_cases": ["job status", "check job", "get job result", "task progress", "background task status"],
      "input_patterns": ["get result for job {jobId}", "check status of job {jobId}", "what is the result of {jobId}"]
    },
    "map-codebase": {
      "description": "Indexes and maps a codebase structure, providing class/function maps, comments, and Mermaid diagrams for AI consumption. Captures doc-strings and inline comments for semantic context.",
      "use_cases": ["map codebase", "analyze code structure", "understand project architecture", "generate code documentation map", "index project symbols", "visualize code dependencies", "semantic code map"],
      "input_patterns": ["map codebase {path}", "generate a code map for project {projectName}", "analyze the structure of {directory}", "show me a semantic map of the codebase", "create architecture diagram for {path}"]
    },
    "vibe-task-manager": {
      "description": "AI-agent-native task management system with recursive decomposition design (RDD) methodology. Supports project creation, task decomposition, dependency management, and agent coordination for autonomous software development workflows.",
      "use_cases": ["task management", "project planning", "task decomposition", "dependency tracking", "agent coordination", "recursive task breakdown", "atomic task detection", "development workflow", "project organization"],
      "input_patterns": ["create project {projectName}", "decompose task {taskId}", "list projects", "run task {taskId}", "check status of {projectName}", "refine task {taskId}", "manage tasks for {projectName}", "break down {requirement} into atomic tasks", "coordinate agents for {projectName}"]
    },
    "curate-context": {
      "description": "Intelligently analyzes codebases and curates comprehensive context packages for AI-driven development tasks. Generates refined prompts, relevance-ranked files, and meta-prompts for downstream AI agents. Supports automatic task type detection, file relevance scoring, content optimization, and XML output formatting for seamless integration with AI development workflows.",
      "use_cases": ["context curation", "codebase analysis", "AI task preparation", "file relevance ranking", "meta-prompt generation", "task decomposition", "development context", "code understanding", "AI workflow preparation"],
      "input_patterns": ["curate context for {task}", "analyze codebase for {feature}", "prepare context for {requirement}", "generate meta-prompt for {task_type}", "rank files for {development_task}", "create context package for {project}"]
    }
  }
}